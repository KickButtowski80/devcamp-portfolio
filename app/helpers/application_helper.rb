module ApplicationHelper
  # style = " " adds bootstrap style, so login options can be 
  # consitstant with other menu options 
  def login_helper style = ''
    # is_a? to check type of the class
    if current_user.is_a?(GuestUser)
      (link_to "Register", new_user_registration_path, class: style) +
      " ".html_safe +
      (link_to "Login", new_user_session_path, class: style)
    else
      link_to "Logout", destroy_user_session_path, method: :delete, class: style
    end
  end
   
    def source_helper(layout_name)
     if session[:source]
       greeting ="Thank you for visiting me from #{session[:source]} and you are on the #{layout_name} layout"
       content_tag(:p, greeting , class: "source-greeting")
     end 
    end
    
    def copyright_generator 
      ITViewTool::Renderer.copyright 'Izak Tarashandegan', 'All right reserved'
    end
    
    def nav_items
      [
        {
          url: root_path,
          title: 'Home'
        },
        {
          url: about_me_path,
          title: 'About Me'
        },
        {
          url: contact_us_path,
          title: 'Contact'
        },
        {
          url: blogs_path,
          title: 'Blog'
        },
        {
          url: portfolios_path,
          title: 'Portfolio'
        },
        {
          url: tech_news_path,
          title: 'Tech News'
        }
      ]
    end
    
    
    
    
    def nav_helper style, tag_type
=begin
# heredoc sample
nav_links = <<NAV
<#{tag_type}><a href="#{root_path}" class="#{style} #{active? root_path }">Home</a></#{tag_type}>
<#{tag_type}><a href="#{about_me_path}" class="#{style} #{active? about_me_path}">About</a></#{tag_type}>
<#{tag_type}><a href="#{contact_us_path}" class="#{style} #{active? contact_us_path}">Contact</a></#{tag_type}>
<#{tag_type}><a href="#{blogs_path}" class="#{style} #{active? blogs_path}">Blogs</a></#{tag_type}>
<#{tag_type}><a href="#{portfolios_path}" class="#{style} #{active? portfolios_path}">Portfolios</a></#{tag_type}>
NAV
=end 

# more cleaner way than heredoc that follows dry

      nav_links = ''
      nav_items.each do |item|
        nav_links << "<#{tag_type}><a href='#{item[:url]}' class='#{style} #{active? item[:url] }'>#{item[:title]}</a></#{tag_type}>"
      end 

      nav_links.html_safe     
    end
    
    def active? path
      #current_page True if the current request URI was generated by the given options.
      "active" if current_page? path
    end
    
    
    def alerts
      alert = (flash[:alert]|| flash[:error]|| flash[:notice]) 
      
      if alert
        alert_generator alert
      end
    end
    
    #alert does not work in form error handeling cuz it can not pick up value of 
    # flash but @portfolio_item.errors can be picked up as an example
    def alert_generator msg
      js add_gritter(msg, :title => "Please pay attention!", sticky: false)
    end
    
end
